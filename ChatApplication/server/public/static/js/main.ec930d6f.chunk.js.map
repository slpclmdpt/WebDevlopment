{"version":3,"sources":["Login.jsx","UserList.jsx","Message.jsx","MessageList.jsx","Outgoing.jsx","services.js","Chat.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","disabled","input","handleInput","bind","assertThisInitialized","e","target","value","setState","_this2","react_default","a","createElement","className","onChange","name","placeholder","onClick","loginUser","React","Component","userList","_ref","users","keys","map","user","key","Message","messages","message","concat","sender","text","timestamp","messageList","src_Message","Outgoing","clearInput","addMessage","refresh","fetch","catch","err","Promise","reject","error","then","response","ok","json","statusText","Chat","username","_this3","setInterval","clearInterval","intervalId","_this4","method","headers","Headers","content-type","body","JSON","stringify","sendMessage","UserList","MessageList","src_Outgoing","App","login","src_Chat","src_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec930d6f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Login extends React.Component{\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tdisabled: true,\r\n\t\t\tinput : \"\"\r\n\t\t};\r\n\t\tthis.handleInput = this.handleInput.bind(this);\r\n\t}\r\n\r\n\thandleInput(e) {\r\n\t\tif(e.target.value){\r\n\t\t\tthis.setState({disabled: false, input: e.target.value});\r\n\t\t} else {\r\n\t\t\tthis.setState({disabled: true});\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"login\">\r\n\t\t          <input onChange={this.handleInput} value={this.state.input}  name=\"username\" placeholder=\"Enter Username\"/>\r\n\t\t          <button disabled={this.state.disabled} onClick={ (e) => this.props.loginUser(this.state.input)}>Login</button>\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\n\r\nconst userList = ({users}) => {\r\n\treturn (\r\n\t\t<ul className=\"users\">\r\n\t\t\t{Object.keys(users).map(user => (<li className=\"user\" key={user}>{user}</li>))}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default userList;","import React from \"react\";\r\n\r\nconst Message = ({messages}) => {\r\n\treturn (\r\n\t\tmessages.map(message => (\r\n\t\t\t<li key={`${message.sender},${message.text}`}>\r\n\t\t\t\t<div className=\"message\">\r\n\t\t\t\t\t<div className=\"meta-info\">\r\n\t\t\t\t\t\t<div className=\"sender-info\">\r\n\t\t\t\t\t\t\t<span className=\"username\">{message.sender}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"message-info\">\r\n\t\t\t\t\t\t\t<span className=\"timestamp\">{message.timestamp}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<p className=\"message-text\">{message.text}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</li>)\r\n\t\t)\r\n\t);\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport Message from \"./Message\";\r\n\r\nconst messageList = ({messages}) => {\r\n\treturn (\r\n\t\t<ul className=\"messages\">\r\n\t\t\t<Message messages={messages}/>\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default messageList;","import React from \"react\";\r\n\r\nclass Outgoing extends React.Component{\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tdisabled: true,\r\n\t\t\tinput: \"\"\r\n\t\t};\r\n\t\tthis.handleInput = this.handleInput.bind(this);\r\n\t\tthis.clearInput = this.clearInput.bind(this);\r\n\t}\r\n\r\n\thandleInput(e) {\r\n\t\tif(e.target.value){\r\n\t\t\tthis.setState({disabled: false, input: e.target.value});\r\n\t\t} else {\r\n\t\t\tthis.setState({disabled: true});\r\n\t\t}\r\n\t}\t\r\n\r\n\tclearInput(){\r\n\t\tthis.setState = ({input: \"\"});\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"outgoing\">\r\n\t\t\t  <input className=\"to-send\" onChange={this.handleInput} value={this.state.input} name=\"text\" placeholder=\"Enter message to send\"/>\r\n\t\t\t  <button disabled={this.state.disabled} onClick={e => {this.props.addMessage(this.state.input); this.clearInput()}}>Send</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Outgoing;","export const sendMessage = (username,message) => {\r\n\treturn fetch(\"/messages\", {\r\n\t\tmethod: \"PUT\",\r\n\t\theaders: new Headers({\"content-type\": \"application/json\"}),\r\n\t\tbody: JSON.stringify({message,username})\r\n\t})\r\n\t.catch(err => Promise.reject({error: \"Network error, try again later.\", err}))\r\n\t.then(response => {\r\n\t\tif(response.ok) {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\treturn Promise.reject({error: \"Message sent failed, try again later.\", err: response.statusText});\r\n\t});\r\n}\r\n\r\nexport const refresh = () => {\r\n\treturn fetch(\"/messages\")\r\n\t.catch(err => Promise.reject({error: \"Network error, try again later.\", err}))\r\n\t.then(response =>{\r\n\t\tif(response.ok){\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\treturn Promise.reject({error: \"Data fetch failed, try again later.\", err: response.statusText});\r\n\t});\r\n}\r\n\r\nexport const login = (name) => {\r\n\treturn fetch(\"/login\", {\r\n\t\tmethod: \"PUT\",\r\n\t\theaders: new Headers({\"content-type\": \"application/json\"}),\r\n\t\tbody: JSON.stringify({name})\r\n\t})\r\n\t.catch(err => Promise.reject({error: \"Network error, try again later.\", err}))\r\n\t.then(response =>{\r\n\t\tif(response.ok){\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\treturn Promise.reject({error: \"Login failed, try again later.\", err: response.statusText});\r\n\t});\t\r\n}","import React from \"react\";\r\nimport UserList from \"./UserList\";\r\nimport MessageList from \"./MessageList\";\r\nimport Outgoing from \"./Outgoing\";\r\nimport {sendMessage,refresh} from \"./services\"\r\n\r\nclass Chat extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tusers: props.users,\r\n\t\t\tmessages: [],\r\n\t\t\tusername: props.username\r\n\t\t};\r\n\t\tthis.addMessage = this.addMessage.bind(this);\r\n\t}\r\n\r\n\tcomponentWillMount(){\r\n\t\trefresh()\r\n\t\t.then( response => {\r\n\t\t\tthis.setState({users: response.users, messages: response.messages});\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tconst intervalId = setInterval(() => {\r\n\t\t\trefresh()\r\n\t\t\t.then(response => {\r\n\t\t\t\tthis.setState({users: response.users, messages: response.messages});\r\n\t\t\t});\r\n\t\t}, 5000);\r\n\t}\r\n\r\n\tcomponentWillUnmount(){\r\n\t\tclearInterval(this.intervalId);\r\n\t}\r\n\r\n\taddMessage(message){\r\n\t\tif(message){\r\n\t\t\tsendMessage(this.state.username,message)\r\n\t\t\t.then( response => {\r\n\t\t\t\tthis.setState({users: response.users, messages: response.messages});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"chat-app\">\r\n\t\t\t\t<div className=\"display-panel\">\r\n\t\t\t\t\t<UserList users={this.state.users}/>\r\n\t\t\t\t\t<MessageList messages={this.state.messages}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Outgoing addMessage={this.addMessage}/>\t\t\t\t\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Chat;","import React, { Component } from 'react';\nimport './App.css';\nimport Login from \"./Login\";\nimport Chat from \"./Chat\";\nimport {login} from \"./services\"\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tusers: {},\n\t\t\tusername: \"\"\n\t\t};\n\t\tthis.loginUser = this.loginUser.bind(this);\n\t}\n\n\tloginUser(name){\n\t\tlogin(name)\n\t\t.then(response =>{\n\t\t\tthis.setState({username: response.username, users: response.users});\n\t\t})\n\n\t}\n\n\trender() {\n\t\tif(!this.state.username){\n\t\t\treturn (\n\t   \t\t\t<Login loginUser={this.loginUser}/>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Chat users={this.state.users} username={this.state.username} />\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}